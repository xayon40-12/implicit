pub type RK<const N: usize> = ([[f32; N]; N], [f32; N], bool);
pub fn gl1() -> RK<1> {
    ([[0.5]], [1.0], false)
}
pub fn gl2() -> RK<2> {
    let sq3 = 3.0f32.sqrt();
    (
        [
            [1.0 / 4.0, 1.0 / 4.0 - 1.0 / 6.0 * sq3],
            [1.0 / 4.0 + 1.0 / 6.0 * sq3, 1.0 / 4.0],
        ],
        [1.0 / 2.0, 1.0 / 2.0],
        false,
    )
}
pub fn gl3() -> RK<3> {
    let sq15 = 15.0f32.sqrt();
    (
        [
            [
                5.0 / 36.0,
                2.0 / 9.0 - sq15 / 15.0,
                5.0 / 36.0 - sq15 / 30.0,
            ],
            [
                5.0 / 36.0 + sq15 / 24.0,
                2.0 / 9.0,
                5.0 / 36.0 - sq15 / 24.0,
            ],
            [
                5.0 / 36.0 + sq15 / 30.0,
                2.0 / 9.0 + sq15 / 15.0,
                5.0 / 36.0,
            ],
        ],
        [5.0 / 18.0, 4.0 / 9.0, 5.0 / 18.0],
        false,
    )
}
pub fn radau1() -> RK<1> {
    ([[1.0]], [1.0], false)
}
pub fn radau2() -> RK<2> {
    (
        [[5.0 / 12.0, -1.0 / 12.0], [3.0 / 4.0, 1.0 / 4.0]],
        [3.0 / 4.0, 1.0 / 4.0],
        false,
    )
}
pub fn rk2() -> RK<2> {
    ([[0.0, 0.0], [1.0, 0.0]], [0.5, 0.5], true)
}
pub fn rk4() -> RK<4> {
    (
        [
            [0.0; 4],
            [0.5, 0.0, 0.0, 0.0],
            [0.0, 0.5, 0.0, 0.0],
            [0.0, 0.0, 1.0, 0.0],
        ],
        [1.0 / 6.0, 1.0 / 3.0, 1.0 / 3.0, 1.0 / 6.0],
        true,
    )
}
